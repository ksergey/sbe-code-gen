{% macro define(class_name, fields) %}
    {% for field in fields %}
        {{- define_property(class_name, field) }}
    {% endfor %}
{% endmacro %}

{% macro define_property(class_name, entry) %}
{%- if 'reference_name' in entry %}
    {% set method_name = entry.reference_name -%}
{%- else %}
    {% set method_name = entry.name -%}
{%- endif %}

{%- if entry.token == 'type' %}
    {{- define_property_type(class_name, method_name, entry) -}}
{%- elif entry.token == 'composite' %}
    {{- define_property_composite(class_name, methon_name, entry) -}}
{%- elif entry.token == 'enum' %}
    {{- define_property_enum(class_name, method_name, entry) -}}
{%- elif entry.token == 'set' %}
    {{- define_property_set(class_name, method_name, entry) -}}
{%- elif entry.token == 'field' %}
    {%- if entry.type.token == 'type' %}
        {{- define_property_type(class_name, method_name, entry) -}}
    {%- elif entry.type.token == 'composite' %}
        {{- define_property_composite(class_name, method_name, entry) -}}
    {%- elif entry.type.token == 'enum' %}
        {{- define_property_enum(class_name, method_name, entry) -}}
    {%- elif entry.type.token == 'set' %}
        {{- define_property_set(class_name, method_name, entry) -}}
    {%- endif %}
{%- elif entry.token == 'group' %}
    {{- define_property_group(class_name, method_name, entry) -}}
{%- elif entry.token == 'data' %}
    {{- define_property_data(class_name, method_name, entry) -}}
{%- endif %}
{% endmacro %}

{% macro define_property_type(class_name, method_name, entry) -%}
{%- if entry.token == 'field' %}
    {% set type = entry.type -%}
{%- else %}
    {% set type = entry -%}
{%- endif %}

{%- if type.length == 1 %}
    {{- define_property_type_single(class_name, method_name, entry) }}
{%- elif type.length > 1 %}
    {{- define_property_type_array(class_name, method_name, entry) }}
{%- endif %}
{%- endmacro %}

{% macro define_property_type_single(class_name, method_name, entry) %}

{%- if entry.token == 'field' %}
    {% set type = entry.type -%}
{%- else %}
    {% set type = entry -%}
{%- endif %}
{%- set underlying_type = type.primitive_type | replace_keyword -%}

{%- if entry.presence == 'constant' %}
[[nodiscard]] static constexpr {{ underlying_type }} {{ method_name | format_method_name_get }}() noexcept {
    {% if type.primitive_type == 'char' %}
    return '{{ type.const_value }}';
    {% else %}
    return {{ type.const_value }};
    {% endif %}
}

{% endif %}

{%- if entry.presence == 'required' or entry.presence == 'optional' %}
[[nodiscard]] {{ underlying_type }} {{ method_name | format_method_name_get }}() const noexcept {
    return *std::bit_cast<{{ underlying_type }} const*>(buffer_ + offset_ + {{ entry.offset }});
}

{% endif %}

{%- if entry.presence != 'constant' %}
{{ class_name }}& {{ method_name | format_method_name_get }}({{ underlying_type }} value) noexcept {
    *std::bit_cast<{{ underlying_type }}*>(buffer_ + offset_ + {{ entry.offset }}) = value;
    return *this;
}

{% endif %}

{%- if entry.presence == 'optional' %}
{{ class_name }}& {{ method_name | format_method_name_reset }}() noexcept {
    return {{ method_name | format_method_name_set }}({{ type.null_value | replace_keyword }});
}

{% endif %}

{%- if entry.presence == 'required' or entry.presence == 'constant' %}
[[nodiscard]] static constexpr bool {{ method_name | format_method_name_is_present }}() noexcept {
    return true;
}
{% endif %}

{%- if entry.presence == 'optional' %}
[[nodiscard]] bool {{ method_name | format_method_name_is_present }}() const noexcept {
    {% if type.primitive_type == 'double' or type.primitive_type == 'float' %}
    constexpr {{ underlying_type }} null = {{ type.null_value | replace_keyword }};
    constexpr {{ underlying_type }} value = {{ method_name | format_method_name_get() }};
    return ((null != null && value != value) || (value != null));
    {% else %}
    return {{ type.null_value | replace_keyword }} != {{ method_name | format_method_name_get }}();
    {% endif %}
}
{% endif %}
{% endmacro %}

{% macro define_property_type_array(class_name, method_name, entry) %}

{%- if entry.token == 'field' %}
    {%- set type = entry.type -%}
{%- else %}
    {%- set type = entry -%}
{%- endif %}
{%- set underlying_type = type.primitive_type | replace_keyword -%}
{%- if type.primitive_type == 'char' %}
    {% set value_type = 'std::string_view' -%}
{%- else %}
    {% set value_type = 'std::span<' ~ underlying_type ~ ' const>' -%}
{%- endif %}

{%- if entry.presence == 'constant' %}
[[nodiscard]] static constexpr {{ value_type }} {{ method_name | format_method_name_get }}() noexcept {
    {% if type.primitive_type == 'char' %}
    return "{{ type.const_value }}";
    {% else %}
    assert(false, "not implemeted");
    {% endif %}
}

{% endif %}

{%- if entry.presence == 'required' or entry.presence == 'optional' %}
[[nodiscard]] {{ value_type }} {{ method_name | format_method_name_get }}() const noexcept {
    return {{ value_type }}(std::bit_cast<{{ underlying_type }} const*>(buffer_ + offset_ + {{ entry.offset }}), {{ type.length }});
}

{% endif %}

{%- if entry.presence != 'constant' and type.primitive_type != 'char' %}
{{ class_name }}& {{ method_name | format_method_name_set }}({{ value_type }} value) noexcept {
    if (value.size() != {{ type.length }}) [[unlikely]] {
        # TODO
        throw std::runtime_error("...");
    }
    std::memcpy(buffer_ + offset_ + {{ entry.offset }}, value.data(), {{ underlying_type }} * {{ type.length }});
    return *this;
}

{% endif %}

{%- if entry.presence != 'constant' and type.primitive_type == 'char' %}
{{ class_name }}& {{ method_name | format_method_name_set }}({{ value_type }} value) noexcept {
    std::size_t const lengthToCopy = std::min<std::size_t>(value.size(), {{ type.length }});
    std::memcpy(buffer_ + offset_ + {{ entry.offset }}, value.data(), lengthToCopy);
    for (std::size_t i = lengthToCopy; i < {{ type.length }}; ++i) {
        *std::bit_cast<{{ underlying_type }}*>(buffer_ + offset_ + {{ entry.offset }} + i) = {{ type.null_value | replace_keyword }};
    }
    return *this;
}

{% endif %}

{%- if entry.presence == 'optional' %}
{{ class_name }}& {{ method_name | format_method_name_reset }}() noexcept {
    return {{ method_name | format_method_name_set }}({{ value_type }}());
}

{% endif %}

{%- if entry.presence == 'required' or entry.presence == 'constant' %}
[[nodiscard]] static constexpr bool {{ method_name | format_method_name_is_present }}() noexcept {
    return true;
}
{% endif %}

{%- if entry.presence == 'optional' %}
[[nodiscard]] bool {{ method_name | format_method_name_is_present }}() const noexcept {
    return {{ type.null_value | replace_keyword }} != {{ method_name | format_method_name_get }}().front();
}
{% endif %}
{% endmacro %}

{% macro define_property_composite(class_name, method_name, entry) %}

{%- if entry.token == 'field' %}
    {% set type = entry.type -%}
{%- else %}
    {% set type = entry -%}
{%- endif %}
{%- set composite_class_name = type.name | format_class_name -%}
{%- set composite_first_entry_method_name = type.contained_types[0].name -%}

[[nodiscard]] {{ composite_class_name }} {{ method_name | format_method_name_get }}() {
    return {{ composite_class_name }}(buffer_, offset_ + {{ entry.offset }}, bufferLength_, actingVersion_);
}

[[nodiscard]] bool {{ method_name | format_method_name_is_present }}() {
    return {{ method_name | format_method_name_get }}().{{ composite_first_entry_method_name | format_method_name_is_present }}();
}
{% endmacro %}

{% macro define_property_enum(class_name, method_name, entry) %}
{%- if entry.token == 'field' %}
    {%- set type = entry.type -%}
{%- else %}
    {%- set type = entry -%}
{%- endif %}
{%- if entry.value_ref != None %}
    {%- set const_value = entry.value_ref -%}
{%- else %}
    {%- set const_value = type.const_value -%}
{%- endif %}
{%- set enum_class_name = type.name | format_class_name -%}
{%- set underlying_type = type.encoding_type | replace_keyword -%}

{%- if entry.presence == 'constant' %}
[[nodiscard]] static constexpr {{ enum_class_name }} {{ method_name | format_method_name_get }}() noexcept {
    return {{ enum_class_name }}::{{ const_value.split('.')[1] }};
}

{% endif %}

{%- if entry.presence == 'required' or entry.presence == 'optional' %}
[[nodiscard]] {{ enum_class_name }} {{ method_name | format_method_name_get }}() const noexcept {
    return {{ enum_class_name }}(*std::bit_cast<{{ underlying_type }} const*>(buffer_ + offset_ + {{ entry.offset }}));
}

{% endif %}

{%- if entry.presence != 'constant' %}
{{ class_name }}& {{ method_name | format_method_name_get }}({{ enum_class_name }} value) noexcept {
    *std::bit_cast<{{ underlying_type }}*>(buffer_ + offset_ + {{ entry.offset }}) = static_cast<{{ underlying_type }}>(value);
    return *this;
}

{% endif %}

{%- if entry.presence == 'optional' %}
{{ class_name }}& {{ method_name | format_method_name_reset }}() noexcept {
    return {{ method_name | format_method_name_set }}({{ enum_class_name }}::NULL_VALUE);
}

{% endif %}

{%- if entry.presence == 'required' or entry.presence == 'constant' %}
[[nodiscard]] static constexpr bool {{ method_name | format_method_name_is_present }}() noexcept {
    return true;
}
{% endif %}

{%- if entry.presence == 'optional' %}
[[nodiscard]] bool {{ method_name | format_method_name_is_present }}() const noexcept {
    return {{ enum_class_name }}::NULL_VALUE != {{ method_name | format_method_name_get }}();
}
{% endif %}
{% endmacro %}

{% macro define_property_set(class_name, method_name, entry) %}
{%- if entry.token == 'field' %}
    {% set type = entry.type -%}
{%- else %}
    {% set type = entry -%}
{%- endif %}
{%- set set_class_name = entry.name | format_class_name -%}
{%- set underlying_type = type.encoding_type | replace_keyword -%}

[[nodiscard]] {{ set_class_name }} {{ method_name | format_method_name_get }}() const {
    return {{ set_class_name }}(*std::bit_cast<{{ underlying_type }} const*>(buffer_ + offset_ + {{ entry.offset }}));
}

{{ class_name }}& {{ method_name | format_method_name_get }}({{ set_class_name }} value) noexcept {
    *std::bit_cast<{{ underlying_type }}*>(buffer_ + offset_ + {{ entry.offset }}) = static_cast<{{ underlying_type }}>(value);
    return *this;
}

[[nodiscard]] static constexpr bool {{ method_name | format_method_name_is_present }}() noexcept {
    return true;
}
{% endmacro %}

{% macro define_property_group(class_name, method_name, entry) %}
{%- set group_class_name = entry.name | format_class_name -%}
{%- set dimensions_type_class_name = entry.dimension_type.name | format_class_name -%}
{%- set num_in_group_type = (entry.dimension_type.contained_types | selectattr('name', 'equalto', 'numInGroup') | first) -%}

[[nodiscard]] {{ group_class_name }} {{ method_name | format_method_name_get }}() {
    return {{ group_class_name }}(buffer_, sbePositionPtr(), actingVersion_, bufferLength_);
}

[[nodiscard]] {{ group_class_name }} {{ method_name | format_method_name_get_count }}(std::size_t count) {
    return {{ group_class_name }}(buffer_, count, sbePositionPtr(), actingVersion_, bufferLength_);
}
{% endmacro %}

{% macro define_property_data(class_name, method_name, entry) %}
{%- set type = entry.type -%}
{%- set length_type = (type.contained_types | selectattr('name', 'equalto', 'length') | first) -%}
{%- set var_data_type = (type.contained_types | selectattr('name', 'equalto', 'varData') | first) -%}
{%- set length_underlying_type = length_type.primitive_type | replace_keyword -%}
{%- set data_underlying_type = var_data_type.primitive_type | replace_keyword -%}

{%- if var_data_type.primitive_type == 'char' or var_data_type.primitive_type == 'uint8' %}
    {%- set data_underlying_type = 'char' -%}
    {%- set value_type = 'std::string_view' -%}
{%- else %}
    {%- set value_type = 'std::span<' ~ data_underlying_type ~ ' const>' -%}
{%- endif %}

[[nodiscard]] std::size_t {{ method_name | format_method_name_length }}() const noexcept {
    return *std::bit_cast<{{ length_underlying_type }} const*>(buffer_ + sbePosition());
}

[[nodiscard]] {{ value_type }} {{ method_name | format_method_name_get }}() noexcept {
    {{ length_underlying_type }} const length = *std::bit_cast<{{ length_underlying_type }} const*>(buffer_ + sbePosition());
    {{ data_underlying_type }} const* begin = std::bit_cast<{{ data_underlying_type }} const*>(buffer_ + sbePosition() + sizeof(length));
    sbePosition(sbePosition() + sizeof(length) + length);
    return {{ value_type }}(begin, length);
}

{{ class_name }}& {{ method_name | format_method_name_set }}({{ value_type }} value) noexcept {
    auto const lengthPosition = sbePosition();
    sbePosition(lengthPosition + sizeof({{ length_underlying_type }}));
    *std::bit_cast<{{ length_underlying_type }}*>(buffer_ + lengthPosition) = value.size();
    if (value.size() > 0) [[likely]] {
        auto const pos = sbePosition();
        auto const size = value.size() * sizeof({{ data_underlying_type }});
        sbePosition(pos + size);
        std::memcpy(buffer_ + pos, value.data(), size);
    }
    return *this;
}

[[nodiscard]] bool {{ method_name | format_method_name_is_present }}() const noexcept {
    return {{ method_name | format_method_name_length }}() > 0;
}
{% endmacro %}
