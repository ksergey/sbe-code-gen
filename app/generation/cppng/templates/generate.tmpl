{% macro wrap_const_value_impl(value, type) %}
{% if type.token in ('enum', 'set') %}
    {% if type.encoding_type.name == 'char' %}
'{{ value }}'
    {% else %}
{{ value | replace_keyword }}
    {% endif %}
{% elif type.token == 'type' %}
    {% if type.primitive_type.name == 'char' %}
        {% if type.length > 1 %}
"{{ value }}"
        {% else %}
'{{ value }}'
        {% endif %}
    {% else %}
{{ value | replace_keyword }}
    {% endif %}
{% else %}
SOMETHING_GOES_WRONG
{% endif %}
{% endmacro %}

{%- macro wrap_const_value(value, type) -%}
{{ wrap_const_value_impl(value, type).strip() }}
{%- endmacro -%}

{% macro field_encoding_type(type) %}
{% if type.token in ('type', 'set', 'enum') %}
sbe_code_gen::Encoding<{{ type.name | format_class_name }}>
{% elif type.token == 'composite' %}
{{ type.name | format_class_name }}
{% elif type.token == 'group' %}
{{ type.name | format_group_name }}
{% elif type.token == 'data' %}
{{ type.name | format_data_name }}
{% else %}
struct unknown_encoding_token
{% endif %}
{% endmacro %}

{% macro field_encoding_impl(field) %}
{{ (field.reference_name or field.name) | format_encoding_class_name }}
{% endmacro %}

{%- macro field_encoding(field) -%}
{{ field_encoding_impl(field).strip() }}
{%- endmacro -%}

{# ---------------------------------------------- #}
{% macro format_presence(value) %}
{% if value == 'required' %}
Presence::Required
{% elif value == 'optional' %}
Presence::Optional
{% elif value == 'constant' %}
Presence::Constant
{% else %}
Presence(-1)
{% endif %}
{% endmacro %}

{% macro define_field_encoding_type_0(field, schema) -%}
{% set type = field.type if field.token == 'field' else field -%}
{% set class_name = (field.name if field.token == 'field' else field.reference_name) | format_encoding_class_name -%}

class {{ class_name }} : public SBEType_Type {
public:
  constexpr {{ class_name }}([[maybe_unused]] std::byte* buffer, [[maybe_unused]] std::size_t offset,
      [[maybe_unused]] std::size_t bufferLength, [[maybe_unused]] std::uint16_t actingVersion) noexcept {}

  [[nodiscard]] static constexpr Presence sbePresence() noexcept {
    return {{ format_presence(field.presence).strip() }};
  }

  [[nodiscard]] static constexpr std::size_t sbeOffset() noexcept {
    return {{ field.offset }};
  }

  [[nodiscard]] static constexpr std::size_t sbeEncodedLength() noexcept {
    return {{ type.encoded_length }};
  }

  [[nodiscard]] static constexpr bool present() noexcept {
    return false;
  }
};
{%- endmacro %}

{% macro define_field_encoding_type_1(field, schema) -%}
{% set type = field.type if field.token == 'field' else field -%}
{% set class_name = (field.name if field.token == 'field' else field.reference_name) | format_encoding_class_name -%}
{% set primitive_type = type.primitive_type.name | replace_keyword -%}

{% set is_required = field.presence == 'required' -%}
{% set is_optional = field.presence == 'optional' -%}
{% set is_constant = field.presence == 'constant' -%}

class {{ class_name }} : public SBEType_Type {
private:
  std::byte* buffer_ = nullptr;

public:
  using value_type = {{ primitive_type }};
  using primitive_type = {{ primitive_type }};

  constexpr {{ class_name }}(std::byte* buffer, std::size_t offset, [[maybe_unused]] std::size_t bufferLength,
      [[maybe_unused]] std::uint16_t actingVersion) noexcept
      : buffer_(buffer + offset + this->sbeOffset()) {}

  [[nodiscard]] static constexpr Presence sbePresence() noexcept {
    return {{ format_presence(field.presence).strip() }};
  }

  [[nodiscard]] static constexpr std::size_t sbeOffset() noexcept {
    return {{ field.offset }};
  }

  [[nodiscard]] static constexpr std::size_t sbeEncodedLength() noexcept {
    return {{ type.encoded_length }};
  }

{% if is_constant or is_required %}
  [[nodiscard]] static constexpr bool present() noexcept {
    return true;
  }

{% endif %}

{{- '' -}}

{% if is_optional %}
  [[nodiscard]] constexpr bool present() const noexcept {
  {% if is_floating_point_type %}
    constexpr {{ primitive_type }} kNullValue = {{ type.null_value | replace_keyword }};
    auto const value = *this->data();
    if constexpr (kNullValue != kNullValue) {
        return !(value != value);
    }
    return value != kNullValue;
  {% else %}
    return *this->data() != {{ type.null_value | replace_keyword }};
  {% endif %}
  }

{% endif %}

{{- '' -}}

{% if is_constant %}
  [[nodiscard]] static constexpr {{ primitive_type }} value() noexcept {
    return {{ wrap_const_value(type.const_value, type) }};
  }

{% endif %}

{{- '' -}}

{% if is_required or is_optional %}
  [[nodiscard]] constexpr {{ primitive_type }} value() const noexcept {
    return *this->data();
  }

  constexpr void setValue({{ primitive_type }} value) noexcept {
    *this->data() = value;
  }

{% endif %}

{{- '' -}}

{% if is_optional %}
  void reset() noexcept {
    *this->data() = {{ primitive_type }}({{ type.null_value | replace_keyword }});
  }

{% endif %}

{{- '' -}}

{% if is_required or is_optional %}
private:
  [[nodiscard]] constexpr {{ primitive_type }} const* data() const noexcept {
    return std::bit_cast<{{ primitive_type }} const*>(buffer_);
  }

  [[nodiscard]] constexpr {{ primitive_type }}* data() noexcept {
    return std::bit_cast<{{ primitive_type }}*>(buffer_);
  }
{% endif %}
};
{%- endmacro %}

{% macro define_field_encoding_type_N(field, schema) -%}
{% set type = field.type if field.token == 'field' else field -%}
{% set class_name = (field.name if field.token == 'field' else field.reference_name) | format_encoding_class_name -%}
{% set primitive_type = 'char' if type.character_encoding and type.primitive_type.size == 1 else type.primitive_type.name | replace_keyword -%}
{% set value_type = 'std::string_view' if primitive_type == 'char' else 'std::span<' ~ primitive_type ~ ' const, ' ~ type.length ~ '>' -%}

{% set is_string = value_type == 'std::string_view' -%}

{% set is_required = field.presence == 'required' -%}
{% set is_optional = field.presence == 'optional' -%}
{% set is_constant = field.presence == 'constant' -%}

class {{ class_name }} : public SBEType_Type {
private:
  std::byte* buffer_ = nullptr;

public:
  using value_type = {{ value_type }};
  using primitive_type = {{ primitive_type }};

  constexpr {{ class_name }}(std::byte* buffer, std::size_t offset, [[maybe_unused]] std::size_t bufferLength,
      [[maybe_unused]] std::uint16_t actingVersion) noexcept
      : buffer_(buffer + offset + this->sbeOffset()) {}

  [[nodiscard]] static constexpr Presence sbePresence() noexcept {
    return {{ format_presence(field.presence).strip() }};
  }

  [[nodiscard]] static constexpr std::size_t sbeOffset() noexcept {
    return {{ field.offset }};
  }

  [[nodiscard]] static constexpr std::size_t sbeEncodedLength() noexcept {
    return {{ type.encoded_length }};
  }

{% if is_constant or is_required %}
  [[nodiscard]] static constexpr bool present() noexcept {
    return true;
  }

{% endif %}

{{- '' -}}

{% if is_optional %}
  [[nodiscard]] constexpr bool present() const noexcept {
    return *this->data() != {{ type.null_value | replace_keyword }};
  }

{% endif %}

{{- '' -}}

{% if is_constant %}
  [[nodiscard]] static constexpr {{ value_type }} value() noexcept {
    return {{ wrap_const_value(type.const_value, type) }};
  }

{% endif %}

{{- '' -}}

{% if is_required or is_optional %}
  [[nodiscard]] constexpr {{ value_type }} value() const noexcept {
  {% if is_string %}
    {{ value_type }} str(this->data(), {{ type.length }});
    return str.substr(0, str.find('\0'));
  {% else %}
    return {{ value_type }}(this->data(), {{ type.length }});
  {% endif %}
  }

  constexpr void setValue({{ value_type }} value) noexcept {
  {% if is_string %}
    value = value.substr(0, {{ type.length }});
    std::fill(std::copy(std::begin(value), std::end(value), this->data()), this->data() + {{ type.length }}, char('\0'));
  {% else %}
    std::copy(std::begin(value), std::end(value), this->data());
  {% endif %}
  }

  [[nodiscard]] {{ primitive_type }} const& operator[](std::size_t n) const noexcept {
    return this->data()[n];
  }

  [[nodiscard]] {{ primitive_type }}& operator[](std::size_t n) noexcept {
    return this->data()[n];
  }

{% endif %}

{{- '' -}}

{% if is_optional %}
  void reset() noexcept {
    *this->data() = {{ primitive_type }}({{ type.null_value | replace_keyword }});
  }

{% endif %}

{{- '' -}}

{% if is_required or is_optional %}
private:
  [[nodiscard]] constexpr {{ primitive_type }} const* data() const noexcept {
    return std::bit_cast<{{ primitive_type }} const*>(buffer_);
  }

  [[nodiscard]] constexpr {{ primitive_type }}* data() noexcept {
    return std::bit_cast<{{ primitive_type }}*>(buffer_);
  }
{% endif %}
};
{%- endmacro %}

{% macro define_field_encoding_type(field, schema) -%}
{% set type = field.type if field.token == 'field' else field -%}
// field: {{ field.name }}
// type: {{ type.name }}
{% if field.description %}
// description: {{ field.description }}
{% endif %}
{% if type.length == 0 %}
{{ define_field_encoding_type_0(field, schema) }}
{% elif type.length == 1 %}
{{ define_field_encoding_type_1(field, schema) }}
{% elif type.length > 1 %}
{{ define_field_encoding_type_N(field, schema) }}
{% endif %}
{%- endmacro %}

{% macro define_field_encoding_enum(field, schema) -%}
{% set type = field.type if field.token == 'field' else field -%}
{% set class_name = (field.name if field.token == 'field' else field.reference_name) | format_encoding_class_name -%}
{% set primitive_type = 'typename ' ~ type.name | format_class_name ~ '::primitive_type' -%}
{% set value_type = type.name | format_class_name -%}

{% set is_required = field.presence == 'required' -%}
{% set is_optional = field.presence == 'optional' -%}
{% set is_constant = field.presence == 'constant' -%}

// field: {{ field.name }}
// enum: {{ type.name }}
{% if field.description %}
// description: {{ field.description }}
{% endif %}
class {{ class_name }} : public SBEType_Enum {
private:
  std::byte* buffer_ = nullptr;

public:
  using value_type = {{ value_type }};
  using primitive_type = {{ primitive_type }};

  constexpr {{ class_name }}(std::byte* buffer, std::size_t offset, [[maybe_unused]] std::size_t bufferLength,
      [[maybe_unused]] std::uint16_t actingVersion) noexcept
      : buffer_(buffer + offset + this->sbeOffset()) {}

  [[nodiscard]] static constexpr Presence sbePresence() noexcept {
    return {{ format_presence(field.presence).strip() }};
  }

  [[nodiscard]] static constexpr std::size_t sbeOffset() noexcept {
    return {{ field.offset }};
  }

  [[nodiscard]] static constexpr std::size_t sbeEncodedLength() noexcept {
    return {{ type.encoded_length }};
  }

{% if is_constant or is_required %}
  [[nodiscard]] static constexpr bool present() noexcept {
    return true;
  }

{% endif %}

{{- '' -}}

{% if is_optional %}
  [[nodiscard]] constexpr bool present() const noexcept {
    return this->value().value() != {{ value_type }}::NULL_VALUE;
  }

{% endif %}

{{- '' -}}

{% if is_constant %}
  [[nodiscard]] static constexpr {{ value_type }} value() noexcept {
    return {{ type.name | format_class_name }}::{{ field.value_ref.split('.')[1] }};
  }

{% endif %}

{{- '' -}}

{% if is_required or is_optional %}
  [[nodiscard]] constexpr {{ value_type }} value() const noexcept {
    return {{ value_type }}(*this->data());
  }

  constexpr void setValue({{ value_type }} value) noexcept {
    *this->data() = value.rawValue();
  }

{% endif %}

{{- '' -}}

{% if is_optional %}
  constexpr void reset() noexcept {
    this->setValue({{ value_type }}());
  }

{% endif %}

{{- '' -}}

{% if is_required or is_optional %}
private:
  [[nodiscard]] constexpr {{ primitive_type }} const* data() const noexcept {
    return std::bit_cast<{{ primitive_type }} const*>(buffer_);
  }

  [[nodiscard]] constexpr {{ primitive_type }}* data() noexcept {
    return std::bit_cast<{{ primitive_type }}*>(buffer_);
  }
{% endif %}
};
{%- endmacro %}

{% macro define_field_encoding_set(field, schema) -%}
{% set type = field.type if field.token == 'field' else field -%}
{% set class_name = (field.name if field.token == 'field' else field.reference_name) | format_encoding_class_name -%}
{% set primitive_type = 'typename ' ~ type.name | format_class_name ~ '::primitive_type' -%}
{% set value_type = type.name | format_class_name -%}

// field: {{ field.name }}
// set: {{ type.name }}
{% if field.description %}
// description: {{ field.description }}
{% endif %}
class {{ class_name }} : public SBEType_Set {
private:
  std::byte* buffer_ = nullptr;

public:
  using value_type = {{ value_type }};
  using primitive_type = {{ primitive_type }};

  constexpr {{ class_name }}(std::byte* buffer, std::size_t offset, [[maybe_unused]] std::size_t bufferLength,
      [[maybe_unused]] std::uint16_t actingVersion) noexcept
      : buffer_(buffer + offset + this->sbeOffset()) {}

  [[nodiscard]] static constexpr Presence sbePresence() noexcept {
    return {{ format_presence(field.presence).strip() }};
  }

  [[nodiscard]] static constexpr std::size_t sbeOffset() noexcept {
    return {{ field.offset }};
  }

  [[nodiscard]] static constexpr std::size_t sbeEncodedLength() noexcept {
    return {{ type.encoded_length }};
  }

  [[nodiscard]] static constexpr bool present() noexcept {
    return true;
  }

  [[nodiscard]] constexpr {{ value_type }} value() const noexcept {
    return {{ value_type }}(*this->data());
  }

  constexpr void setValue({{ value_type }} value) noexcept {
    *this->data() = value.rawValue();
  }

private:
  [[nodiscard]] constexpr {{ primitive_type }} const* data() const noexcept {
    return std::bit_cast<{{ primitive_type }} const*>(buffer_);
  }

  [[nodiscard]] constexpr {{ primitive_type }}* data() noexcept {
    return std::bit_cast<{{ primitive_type }}*>(buffer_);
  }
};
{%- endmacro %}

{% macro define_field_encoding_composite(field, schema) -%}
{% set type = field.type if field.token == 'field' else field -%}
{% set class_name = (field.name if field.token == 'field' else field.reference_name) | format_encoding_class_name -%}
{% set value_type = type.name | format_class_name -%}

{% set is_required = type.contained_types[0].presence == 'required' -%}
{% set is_optional = type.contained_types[0].presence == 'optional' -%}

// field: {{ field.name }}
// composite: {{ type.name }}
{% if field.description %}
// description: {{ field.description }}
{% endif %}
class {{ class_name }} : public {{ value_type }}, public SBEType_Composite {
public:
  using {{ value_type }}::{{ value_type }};

  [[nodiscard]] static constexpr Presence sbePresence() noexcept {
    return {{ format_presence(type.contained_types[0].presence).strip() }};
  }

  [[nodiscard]] static constexpr std::size_t sbeOffset() noexcept {
    return {{ field.offset }};
  }

  [[nodiscard]] static constexpr std::size_t sbeEncodedLength() noexcept {
    return {{ type.encoded_length }};
  }

{% if is_constant or is_required %}
  [[nodiscard]] static constexpr bool present() noexcept {
    return true;
  }

{% endif %}

{{- '' -}}

{% if is_optional %}
  [[nodiscard]] constexpr bool present() const noexcept {
    return this->template field<0>().present();
  }

{% endif %}
};
{%- endmacro %}

{% macro define_field_encoding_data(field, schema) -%}
{% set class_name = field.name | format_encoding_class_name -%}
{% set length = (field.type.contained_types | selectattr('name', 'equalto', 'length') | first) -%}
{% set var_data = (field.type.contained_types | selectattr('name', 'equalto', 'varData') | first) -%}
{% set primitive_type = 'char' if var_data.character_encoding and var_data.primitive_type.size == 1 else var_data.primitive_type.name | replace_keyword -%}
{% set value_type = 'std::string_view' if primitive_type == 'char' else 'std::span<' ~ primitive_type ~ ' const>' -%}
{% set length_type = length.primitive_type.name | replace_keyword -%}

// data: {{ field.name }}
{% if field.description %}
// description: {{ field.description }}
{% endif %}
class {{ class_name }} : public SBEType_Data {
private:
  std::byte* buffer_ = nullptr;
  std::size_t bufferLength_ = 0;
  std::size_t initialPosition_ = 0;
  std::size_t* positionPtr_ = nullptr;
  std::uint16_t actingVersion_ = 0;

public:
  using value_type = {{ value_type }};
  using primitive_type = {{ primitive_type }};
  using length_type = {{ length_type }};

  constexpr {{ class_name }}(std::byte* buffer, std::size_t* pos, std::size_t bufferLength, std::uint16_t actingVersion)
      : buffer_(buffer), bufferLength_(bufferLength), initialPosition_(*pos), positionPtr_(pos),
        actingVersion_(actingVersion) {
    *positionPtr_ = *positionPtr_ + {{ length.encoded_length }};
  }

  [[nodiscard]] constexpr {{ value_type }} value() {
    std::size_t const count = *std::bit_cast<{{ length_type }} const*>(buffer_ + initialPosition_);
    {{ primitive_type }} const* data = std::bit_cast<{{ primitive_type }} const*>(buffer_ + initialPosition_ + {{ length.encoded_length }});
    this->sbePosition(initialPosition_ + {{ length.encoded_length }} + count * {{ var_data.primitive_type.size }});
    return {{ value_type }}(data, count);
  }

  constexpr void setValue({{ value_type }} value) {
    // TODO: check {{ length.min_value }}, {{ length.max_value }}
    *std::bit_cast<{{ length_type }}*>(buffer_ + initialPosition_) = value.size();
    {{ primitive_type }}* data = std::bit_cast<{{ primitive_type }}*>(buffer_ + initialPosition_ + {{ length.encoded_length }});
    this->sbePosition(initialPosition_ + {{ length.encoded_length }} + value.size() * {{ var_data.primitive_type.size }});
    std::copy(std::begin(value), std::end(value), data);
  }

  constexpr std::size_t sbeCheckPosition(std::size_t position) const {
    if (position > bufferLength_) [[unlikely]] {
      throw std::runtime_error("buffer too short [E100]");
    }
    return position;
  }

  constexpr void sbePosition(std::size_t position) {
    *positionPtr_ = this->sbeCheckPosition(position);
  }
};
{%- endmacro %}

{% macro define_field_encoding_group(field, schema) -%}
{% set class_name = field.name | format_encoding_class_name -%}
{% set group_class_name = field.name | format_group_name -%}

// group: {{ field.name }}
{% if field.description %}
// description: {{ field.description }}
{% endif %}
struct {{ class_name }} : public {{ group_class_name }}, public SBEType_Group {
    using {{ group_class_name }}::{{ group_class_name }};
};
{%- endmacro %}

{% macro define_enum(type, schema) -%}
{% set class_name = type.name | format_class_name -%}
{% set primitive_type = type.encoding_type.name | replace_keyword -%}

// enum: {{ type.name }}
{% if type.description %}
// description: {{ type.description }}
{% endif %}
class {{ class_name }} {
private:
  {{ primitive_type }} value_;

public:
  using primitive_type = {{ primitive_type }};

  using ValidValues = MP_List<
{% for valid_value in type.valid_values %}
    MP_Pair<MP_Str<"{{ valid_value.name }}">, MP_Value<{{ primitive_type }}({{ wrap_const_value(valid_value.value, type) }})>>{% if not loop.last %},{% endif +%}
{% endfor %}
  >;

  enum enumerated : {{ primitive_type }} {
{% for valid_value in type.valid_values %}
    {{ valid_value.name }} = {{ wrap_const_value(valid_value.value, type) }},
{% endfor %}
    NULL_VALUE = {{ type.null_value | replace_keyword }}
  };

  constexpr {{ class_name }}() noexcept : {{ class_name }}(enumerated::NULL_VALUE) {}

  constexpr {{ class_name }}(enumerated value) noexcept : value_(value) {}

  explicit constexpr {{ class_name }}({{ primitive_type }} value) noexcept : value_(value) {}

  [[nodiscard]] constexpr {{ primitive_type }} rawValue() const noexcept {
    return value_;
  }

  constexpr void setRawValue({{ primitive_type }} value) noexcept {
    value_ = value;
  }

  [[nodiscard]] constexpr enumerated value() const noexcept {
    return enumerated(value_);
  }

  constexpr void setValue(enumerated value) noexcept {
    value_ = value;
  }

  [[nodiscard]] static constexpr char const* toCString({{ class_name }} value) noexcept {
    switch (value.value()) {
{% for valid_value in type.valid_values %}
    case enumerated::{{ valid_value.name }}:
      return "{{ valid_value.name }}";
{% endfor %}
    default:
      break;
    }
    return "";
  }

  [[nodiscard]] static constexpr std::string_view toStringView({{ class_name }} value) noexcept {
    using namespace std::string_view_literals;
    switch (value.value()) {
{% for valid_value in type.valid_values %}
    case enumerated::{{ valid_value.name }}:
      return "{{ valid_value.name }}"sv;
{% endfor %}
    default:
      break;
    }
    return ""sv;
  }
};
{%- endmacro %}

{% macro define_set(type, schema) -%}
{% set class_name = type.name | format_class_name -%}
{% set primitive_type = type.encoding_type.name | replace_keyword -%}

// set: {{ type.name }}
{% if type.description %}
// description: {{ type.description }}
{% endif %}
class {{ class_name }} {
private:
  {{ primitive_type }} value_ = 0;

public:
  using primitive_type = {{ primitive_type }};

  using Choices = MP_List<
{% for choice in type.choices %}
    MP_Pair<MP_Str<"{{ choice.name }}">, MP_Value<{{ primitive_type }}(1 << {{ choice.value }})>>{% if not loop.last %},{% endif +%}
{% endfor %}
  >;

{% for choice in type.choices %}
  static constexpr auto {{ choice.name }} = {{ primitive_type }}(1 << {{ choice.value }});
{% endfor %}

  constexpr {{ class_name }}() = default;

  constexpr {{ class_name }}({{ primitive_type }} value) noexcept : value_(value) {}

  [[nodiscard]] constexpr {{ primitive_type }} rawValue() const noexcept {
    return value_;
  }

  constexpr void setRawValue({{ primitive_type }} value) noexcept {
    value_ = value;
  }

  [[nodiscard]] constexpr bool operator[]({{ primitive_type }} choiceBit) const noexcept {
    return (choiceBit == (choiceBit & this->rawValue()));
  }

  [[nodiscard]] constexpr bool test({{ primitive_type }} choiceBit) const noexcept {
    return (choiceBit == (choiceBit & this->rawValue()));
  }

  constexpr {{ class_name }}& set({{ primitive_type }} choiceBit, bool value = true) noexcept {
    this->setRawValue(value ? (this->rawValue() | choiceBit) : (this->rawValue() & ~choiceBit));
    return *this;
  }

  constexpr {{ class_name }}& reset() noexcept {
    this->setRawValue(0);
    return *this;
  }

  constexpr {{ class_name }}& reset({{ primitive_type }} choiceBit) noexcept {
    return this->set(choiceBit, false);
  }
};
{%- endmacro %}

{% macro define_composite(type, schema) -%}
{% set composite_class_name = type.name | format_class_name -%}

// composite: {{ type.name }}
{% if type.description %}
// description: {{ type.description }}
{% endif %}
class {{ composite_class_name }} {
private:
  std::byte* buffer_ = nullptr;
  std::size_t bufferLength_ = 0;
  std::size_t offset_ = 0;
  std::uint16_t actingVersion_ = 0;

public:
{# XXX: define inplace types #}
{% for contained_type in type.contained_types if contained_type.inplace %}
  {% if contained_type.token == 'enum' %}
  {{ define_enum(contained_type, schema) | indent(2) -}}
  {% elif contained_type.token == 'set' %}
  {{ define_set(contained_type, schema) | indent(2) -}}
  {% elif contained_type.token == 'composite' %}
  {{ define_composite(contained_type, schema) | indent(2) -}}
  {% endif %}

{% endfor %}
{{- '' -}}
{# XXX: define field encodings #}
{% for contained_type in type.contained_types %}
  {% if contained_type.token == 'type' %}
  {{ define_field_encoding_type(contained_type, schema) | indent(2) -}}
  {% elif contained_type.token == 'enum' %}
  {{ define_field_encoding_enum(contained_type, schema) | indent(2) -}}
  {% elif contained_type.token == 'set' %}
  {{ define_field_encoding_set(contained_type, schema) | indent(2) -}}
  {% elif contained_type.token == 'composite' %}
  {{ define_field_encoding_composite(contained_type, schema) | indent(2) -}}
  {% endif %}

{% endfor %}
{{- '' -}}
  using Fields = MP_List<
{% for contained_type in type.contained_types %}
    MP_Pair<MP_Str<"{{ contained_type.reference_name }}">, {{ field_encoding(contained_type) }}>{% if not loop.last %},{% endif +%}
{% endfor %}
  >;

  constexpr {{ composite_class_name }}() = default;

  constexpr {{ composite_class_name }}(std::byte* buffer, std::size_t offset, std::size_t bufferLength, std::uint16_t actingVersion)
      : buffer_(buffer), bufferLength_(bufferLength), offset_(offset), actingVersion_(actingVersion) {
    if ((offset_ + encodedLength()) > bufferLength_) [[unlikely]] {
      throw std::runtime_error("buffer too short for flyweight {{ type.name }} [E107]");
    }
  }

  constexpr {{ composite_class_name }}(std::byte* buffer, std::size_t bufferLength, std::uint16_t actingVersion)
      : {{ composite_class_name }}(buffer, 0, bufferLength, actingVersion) {}

  constexpr {{ composite_class_name }}(std::byte* buffer, std::size_t bufferLength)
      : {{ composite_class_name }}(buffer, 0, bufferLength, sbeSchemaVersion()) {}

  [[nodiscard]] static constexpr std::size_t encodedLength() noexcept {
    return {{ type.encoded_length }};
  }

  [[nodiscard]] std::size_t offset() const noexcept {
    return offset_;
  }

  [[nodiscard]] std::byte const* buffer() const noexcept {
    return buffer_;
  }

  [[nodiscard]] std::byte* buffer() noexcept {
    return buffer_;
  }

  [[nodiscard]] std::size_t bufferLength() const noexcept {
    return bufferLength_;
  }

  [[nodiscard]] std::uint16_t actingVersion() const noexcept {
    return actingVersion_;
  }

  [[nodiscard]] static constexpr std::uint16_t sbeSchemaId() noexcept {
    return {{ schema.id }};
  }

  [[nodiscard]] static constexpr std::uint16_t sbeSchemaVersion() noexcept {
    return {{ schema.version }};
  }

  template <std::size_t N>
  [[nodiscard]] constexpr auto field() noexcept -> FieldByIndex<Fields, N> {
    using F = FieldByIndex<Fields, N>;
    return F(this->buffer(), this->offset(), this->bufferLength(), this->actingVersion());
  }

  template <CtString Name>
  [[nodiscard]] constexpr auto field() noexcept -> FieldByName<Fields, Name> {
    using F = FieldByName<Fields, Name>;
    return F(this->buffer(), this->offset(), this->bufferLength(), this->actingVersion());
  }
};
{%- endmacro %}

{% macro define_group(group, schema) -%}
{% set group_class_name = group.name | format_group_name -%}
{% set dimensions_type_class_name = group.dimension_type.name | format_class_name -%}
{% set num_in_group_type = (group.dimension_type.contained_types | selectattr('name', 'equalto', 'numInGroup') | first) -%}

// group: {{ group.name }}
{% if group.description %}
// description: {{ group.description }}
{% endif %}
class {{ group_class_name }} {
private:
  std::byte* buffer_ = nullptr;
  std::size_t bufferLength_ = 0;
  std::size_t initialPosition_ = 0;
  std::size_t* positionPtr_ = nullptr;
  std::size_t actingBlockLength_ = 0;
  std::uint16_t actingVersion_ = 0;
  std::size_t count_ = 0;
  std::size_t index_ = 0;
  std::size_t offset_ = 0;

public:
{# XXX: select <group> fields #}
{% for field in group.fields if field.token == 'group' %}
  {{ define_group(field, schema) | indent(2) -}}

{% endfor %}
{% for field in group.fields %}
  {% if field.token == 'field' %}
    {% if field.type.token == 'type' %}
  {{ define_field_encoding_type(field, schema) | indent(2) -}}
    {% elif field.type.token == 'enum' %}
  {{ define_field_encoding_enum(field, schema) | indent(2) -}}
    {% elif field.type.token == 'set' %}
  {{ define_field_encoding_set(field, schema) | indent(2) -}}
    {% elif field.type.token == 'composite' %}
  {{ define_field_encoding_composite(field, schema) | indent(2) -}}
    {% endif %}
  {% elif field.token == 'data' %}
  {{ define_field_encoding_data(field, schema) | indent(2) -}}
  {% elif field.token == 'group' %}
  {{ define_field_encoding_group(field, schema) | indent(2) -}}
  {% endif %}

{% endfor %}

  using Fields = MP_List<
{% for field in group.fields %}
     MP_Pair<MP_Str<"{{ field.name }}">, {{ field_encoding(field) }}>{% if not loop.last %},{% endif +%}
{% endfor %}
  >;

  constexpr {{ group_class_name }}() = default;

  constexpr {{ group_class_name }}(std::byte* buffer, std::size_t* pos, std::size_t bufferLength, std::uint16_t actingVersion) {
    {{ dimensions_type_class_name }} dimensions(buffer, *pos, bufferLength, actingVersion);
    buffer_ = buffer;
    bufferLength_ = bufferLength;
    actingBlockLength_ = dimensions.template field<"blockLength">().value();
    count_ = dimensions.template field<"numInGroup">().value();
    index_ = 0;
    actingVersion_ = actingVersion;
    initialPosition_ = *pos;
    positionPtr_ = pos;
    *positionPtr_ = *positionPtr_ + {{ dimensions_type_class_name }}::encodedLength();
  }

  constexpr {{group_class_name}}& reset(std::size_t count) {
    if (count > ({{ num_in_group_type.max_value | replace_keyword }})) {
      throw std::runtime_error("count outside of allowed range in group {{ group.name }} [E110]");
    }

    count_ = count;
    actingBlockLength_ = sbeBlockLength();
    index_ = 0;

    {{ dimensions_type_class_name }} dimensions(buffer_, initialPosition_, bufferLength_, actingVersion_);
    dimensions.template field<"blockLength">().setValue(sbeBlockLength());
    dimensions.template field<"numInGroup">().setValue(count_);

    *positionPtr_ = initialPosition_ + {{ dimensions_type_class_name }}::encodedLength();

    return *this;
  }

  [[nodiscard]] static constexpr std::size_t sbeBlockLength() noexcept {
    return {{ group.block_length }};
  }

  [[nodiscard]] constexpr std::byte const* buffer() const noexcept {
    return buffer_;
  }

  [[nodiscard]] constexpr std::byte* buffer() noexcept {
    return buffer_;
  }

  [[nodiscard]] constexpr std::size_t bufferLength() const noexcept {
    return bufferLength_;
  }

  [[nodiscard]] constexpr std::size_t offset() const noexcept {
    return offset_;
  }

  [[nodiscard]] constexpr std::size_t sbePosition() const noexcept {
    return *positionPtr_;
  }

  constexpr std::size_t sbeCheckPosition(std::size_t position) {
    if (position > bufferLength_) [[unlikely]] {
      throw std::runtime_error("buffer too short [E100]");
    }
    return position;
  }

  constexpr void sbePosition(std::size_t position) {
    *positionPtr_ = sbeCheckPosition(position);
  }

  [[nodiscard]] constexpr std::size_t actingBlockLength() const noexcept {
    return actingBlockLength_;
  }

  [[nodiscard]] constexpr std::uint16_t actingVersion() const noexcept {
    return actingVersion_;
  }

  [[nodiscard]] constexpr std::size_t count() const noexcept {
    return count_;
  }

  [[nodiscard]] constexpr bool hasNext() const noexcept {
    return index_ < count_;
  }

  constexpr {{ group_class_name }}& next() {
    if (index_ >= count_) {
      throw std::runtime_error("index >= count [E108]");
    }
    offset_ = *positionPtr_;
    if ((offset_ + actingBlockLength_) > bufferLength_) [[unlikely]] {
      throw std::runtime_error("buffer too short for next group index [E108]");
    }
    *positionPtr_ = offset_ + actingBlockLength_;
    ++index_;

    return *this;
  }

  constexpr std::size_t resetCountToIndex() {
    count_ = index_;
    {{ dimensions_type_class_name }} dimensions(buffer_, initialPosition_, bufferLength_, actingVersion_);
    dimensions.template field<"numInGroup">().setValue(count_);
    return count_;
  }

  template <std::size_t N>
  [[nodiscard]] constexpr auto field() noexcept -> FieldByIndex<Fields, N> {
    using F = FieldByIndex<Fields, N>;

    if constexpr (std::derived_from<F, sbe_code_gen::SBEType_Group>) {
      return F(this->buffer(), this->sbePositionPtr(), this->bufferLength(), this->actingVersion());
    } else if constexpr (std::derived_from<F, sbe_code_gen::SBEType_Data>) {
      return F(this->buffer(), this->sbePositionPtr(), this->bufferLength(), this->actingVersion());
    } else {
      return F(this->buffer(), this->offset(), this->bufferLength(), this->actingVersion());
    }
  }

  template <CtString Name>
  [[nodiscard]] constexpr auto field() noexcept -> FieldByName<Fields, Name> {
    using F = FieldByName<Fields, Name>;

    if constexpr (std::derived_from<F, sbe_code_gen::SBEType_Group>) {
      return F(this->buffer(), this->sbePositionPtr(), this->bufferLength(), this->actingVersion());
    } else if constexpr (std::derived_from<F, sbe_code_gen::SBEType_Data>) {
      return F(this->buffer(), this->sbePositionPtr(), this->bufferLength(), this->actingVersion());
    } else {
      return F(this->buffer(), this->offset(), this->bufferLength(), this->actingVersion());
    }
  }

private:
  [[nodiscard]] constexpr std::size_t* sbePositionPtr() noexcept {
    return positionPtr_;
  }
};
{%- endmacro %}

{% macro message_definition(message, schema) -%}
{% set message_class_name = message.name | format_class_name -%}
{% set header_class_name = schema.header_type.name | format_class_name -%}

// message: {{ message.name }}
{% if message.description %}
// description: {{ message.description }}
{% endif %}
class {{ message_class_name }} : public sbe_code_gen::SBEType_Message {
private:
  std::byte* buffer_ = nullptr;
  std::size_t bufferLength_ = 0;
  std::size_t offset_ = 0;
  std::size_t position_ = 0;
  std::size_t actingBlockLength_ = 0;
  std::uint16_t actingVersion_ = 0;

public:
{# XXX: select <group> fields #}
{% for field in message.fields if field.token == 'group' %}
  {{ define_group(field, schema) | indent(2) -}}

{% endfor %}
{% for field in message.fields %}
  {% if field.token == 'field' %}
    {% if field.type.token == 'type' %}
  {{ define_field_encoding_type(field, schema) | indent(2) -}}
    {% elif field.type.token == 'enum' %}
  {{ define_field_encoding_enum(field, schema) | indent(2) -}}
    {% elif field.type.token == 'set' %}
  {{ define_field_encoding_set(field, schema) | indent(2) -}}
    {% elif field.type.token == 'composite' %}
  {{ define_field_encoding_composite(field, schema) | indent(2) -}}
    {% endif %}
  {% elif field.token == 'data' %}
  {{ define_field_encoding_data(field, schema) | indent(2) -}}
  {% elif field.token == 'group' %}
  {{ define_field_encoding_group(field, schema) | indent(2) -}}
  {% endif %}

{% endfor %}

  using Fields = MP_List<
{% for field in message.fields %}
     MP_Pair<MP_Str<"{{ field.name }}">, {{ field_encoding(field) }}>{% if not loop.last %},{% endif +%}
{% endfor %}
  >;

  constexpr {{ message_class_name }}() = default;

  constexpr {{ message_class_name }}(std::byte* buffer, std::size_t offset, std::size_t bufferLength,
      std::size_t actingBlockLength, std::uint16_t actingVersion)
      : buffer_(buffer), bufferLength_(bufferLength), offset_(offset),
        position_(sbeCheckPosition(offset + actingBlockLength)), actingBlockLength_(actingBlockLength),
        actingVersion_(actingVersion) {}

  constexpr {{ message_class_name }}(std::byte* buffer, std::size_t bufferLength)
      : {{ message_class_name  }}(buffer, 0, bufferLength, sbeBlockLength(), sbeSchemaVersion()) {}

  constexpr {{ message_class_name }}(std::byte* buffer, std::size_t bufferLength, std::size_t actingBlockLength,
      std::uint16_t actingVersion)
      : {{ message_class_name }}(buffer, 0, bufferLength, actingBlockLength, actingVersion) {}

  static constexpr {{ message_class_name }} wrapAndApplyHeader(std::byte* buffer, std::size_t offset, std::size_t bufferLength) {
    auto header = MessageHeader(buffer, offset, bufferLength, sbeSchemaVersion());
    header.field<"blockLength">().setValue(sbeBlockLength());
    header.field<"templateId">().setValue(sbeTemplateId());
    header.field<"schemaId">().setValue(sbeSchemaId());
    header.field<"version">().setValue(sbeSchemaVersion());

    return {{ message_class_name }}(buffer, offset + {{ header_class_name }}::encodedLength(), bufferLength, sbeBlockLength(), sbeSchemaVersion());
  }

  [[nodiscard]] static constexpr std::string_view name() noexcept {
    return "{{ message.name }}";
  }

  [[nodiscard]] static constexpr std::uint16_t id() noexcept {
    return {{ message.id }};
  }

  [[nodiscard]] constexpr std::byte const* buffer() const noexcept {
    return buffer_;
  }

  [[nodiscard]] constexpr std::byte* buffer() noexcept {
    return buffer_;
  }

  [[nodiscard]] constexpr std::size_t bufferLength() const noexcept {
    return bufferLength_;
  }

  [[nodiscard]] constexpr std::size_t offset() const noexcept {
    return offset_;
  }

  [[nodiscard]] constexpr std::size_t sbePosition() const noexcept {
    return position_;
  }

  constexpr void sbePosition(std::size_t value) {
    position_ = sbeCheckPosition(value);
  }

  [[nodiscard]] constexpr std::size_t actingBlockLength() const noexcept {
    return actingBlockLength_;
  }

  [[nodiscard]] constexpr std::uint16_t actingVersion() const noexcept {
    return actingVersion_;
  }

  [[nodiscard]] static constexpr std::uint16_t sbeSchemaId() noexcept {
    return {{ schema.id }};
  }

  [[nodiscard]] static constexpr std::uint16_t sbeSchemaVersion() noexcept {
    return {{ schema.version }};
  }

  [[nodiscard]] static constexpr std::size_t sbeBlockLength() noexcept {
    return {{ message.block_length }};
  }

  [[nodiscard]] static constexpr std::uint16_t sbeTemplateId() noexcept {
    return {{ message.id }};
  }

  constexpr std::size_t sbeCheckPosition(std::size_t position) {
    if (position > bufferLength_) [[unlikely]] {
      throw std::runtime_error("buffer too short for message {{ message.name }} [E100]");
    }
    return position;
  }

  constexpr {{ message_class_name }}& sbeRewind() {
    return *this = {{ message_class_name }}(buffer_, offset_, bufferLength_, actingBlockLength_, actingVersion_);
  }

  [[nodiscard]] constexpr std::size_t encodedLength() const noexcept {
    return sbePosition() - offset_;
  }

  template <std::size_t N>
  [[nodiscard]] constexpr auto field() noexcept -> FieldByIndex<Fields, N> {
    using F = FieldByIndex<Fields, N>;

    if constexpr (std::derived_from<F, sbe_code_gen::SBEType_Group>) {
      return F(this->buffer(), this->sbePositionPtr(), this->bufferLength(), this->actingVersion());
    } else if constexpr (std::derived_from<F, sbe_code_gen::SBEType_Data>) {
      return F(this->buffer(), this->sbePositionPtr(), this->bufferLength(), this->actingVersion());
    } else {
      return F(this->buffer(), this->offset(), this->bufferLength(), this->actingVersion());
    }
  }

  template <CtString Name>
  [[nodiscard]] constexpr auto field() noexcept -> FieldByName<Fields, Name> {
    using F = FieldByName<Fields, Name>;

    if constexpr (std::derived_from<F, sbe_code_gen::SBEType_Group>) {
      return F(this->buffer(), this->sbePositionPtr(), this->bufferLength(), this->actingVersion());
    } else if constexpr (std::derived_from<F, sbe_code_gen::SBEType_Data>) {
      return F(this->buffer(), this->sbePositionPtr(), this->bufferLength(), this->actingVersion());
    } else {
      return F(this->buffer(), this->offset(), this->bufferLength(), this->actingVersion());
    }
  }

private:
  [[nodiscard]] std::size_t* sbePositionPtr() noexcept {
    return &position_;
  }
};
{%- endmacro %}
